name: Generate Preview Images

on:
  workflow_run:
    workflows: ["Update CSV with PDF files"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Recreate all images'
        required: false
        default: 'false'

jobs:
  generateImages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils

      - name: Generate PNG images and update CSV
        id: generate_images
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const baseUrl = 'https://raw.githubusercontent.com/${{ github.repository }}/main/';
            const csvFilePath = 'csv_data.csv';
            const metadataFolder = 'metadata';
            const recreateImages = "${{ github.event.inputs.recreate }}" === "true";
            const delimiter = ';';

            // Ensure the metadata folder exists
            if (!fs.existsSync(metadataFolder)) {
                fs.mkdirSync(metadataFolder);
            }

            // Read CSV file
            const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
            const rows = csvContent.split('\n').filter(row => row.trim());
            const headers = rows[0].split(delimiter);
            
            // Find column indices
            const idIndex = headers.indexOf('ID');
            const filePathIndex = headers.indexOf('File Path');
            const imageUrlIndex = headers.indexOf('Image URL');

            // If Image URL column doesn't exist, add it
            let newHeaders = [...headers];
            if (imageUrlIndex === -1) {
                newHeaders.push('Image URL');
            }

            // Process each row
            const newRows = [newHeaders.join(delimiter)];
            
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i].split(delimiter);
                const id = row[idIndex];
                const pdfPath = row[filePathIndex];
                const imagePath = path.join(metadataFolder, `${id}.png`);
                
                // Generate image if it doesn't exist or recreation is requested
                if (recreateImages || !fs.existsSync(imagePath)) {
                    try {
                        console.log(`Converting PDF: ${pdfPath} to Image: ${imagePath}`);
                        const outputPrefix = path.join(metadataFolder, id);
                        execSync(`pdftoppm -png -f 1 -l 1 -singlefile "${pdfPath}" "${outputPrefix}"`);
                    } catch (error) {
                        console.error(`Failed to convert ${pdfPath}: ${error.message}`);
                    }
                }

                // Update row with image URL
                const imageUrl = baseUrl + `metadata/${id}.png`;
                if (imageUrlIndex === -1) {
                    row.push(imageUrl);
                } else {
                    row[imageUrlIndex] = imageUrl;
                }
                
                newRows.push(row.join(delimiter));
            }

            // Write updated CSV
            fs.writeFileSync(csvFilePath, newRows.join('\n') + '\n');

      - name: Commit changes
        env:
          ACTIONS_PAT: ${{ secrets.ACTIONS_PAT }}
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions Bot"
          git add csv_data.csv metadata/
          git commit -m "Update CSV with preview image URLs" || echo "No changes to commit"
          git push "https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }}.git"
