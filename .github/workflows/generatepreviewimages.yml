name: Generate Images from PDFs

on:
  workflow_run:
    workflows: ["Update csv_data.csv with new PDFs"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Recreate all images'
        required: false
        default: 'false'

jobs:
  generateImages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick poppler-utils 
          npm install pdf-parse
      
      - name: Configure ImageMagick Security Policy
        run: |
          echo '<policy domain="coder" rights="read|write" pattern="PDF"/>' | sudo tee -a /etc/ImageMagick-6/policy.xml

      - name: Generate PNG images and update CSV
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const baseUrl = 'https://raw.githubusercontent.com/${{ github.repository }}/main/';
            const csvFilePath = 'csv_data.csv';
            const metadataFolder = 'metadata';
            const recreateImages = "${{ github.event.inputs.recreate }}" === "true";

            // Ensure the metadata folder exists
            if (!fs.existsSync(metadataFolder)){
                fs.mkdirSync(metadataFolder);
            }

            const readCSV = (filePath) => {
                const data = fs.readFileSync(filePath, 'utf-8');
                return data.split('\n').map(row => row.split(',')).filter(row => row.length > 1);
            };

            const writeCSV = (filePath, rows) => {
                const csvContent = rows.map(e => e.join(",")).join("\n");
                fs.writeFileSync(filePath, csvContent, 'utf-8');
            };

            const convertPDFToImage = (pdfPath, imagePath) => {
                execSync(`convert -density 150 "${pdfPath}[0]" -quality 90 "${imagePath}"`);
            };

            const rows = readCSV(csvFilePath);
            const headers = rows[0];  // Store the header row for later use
            const csvData = rows.slice(1).map(row => {
                return {
                    id: row[0],
                    title: row[1],
                    categories: row[2],
                    description: row[3],
                    creationDate: row[4],
                    uploadDate: row[5],
                    reportYear: row[6],
                    reportQuarter: row[7],
                    imageUrl: row[8],
                    pdfUrl: row[9]
                };
            });

            // Process each row to generate images
            csvData.forEach(entry => {
                const { id, pdfUrl } = entry;

                // Construct paths
                const pdfPath = pdfUrl.replace(baseUrl, '');
                const imagePath = path.resolve(metadataFolder, `${id}.png`);
                const imageURL = `${baseUrl}${metadataFolder}/${id}.png`;

                // Check if the image already exists
                if (!recreateImages && fs.existsSync(imagePath)) {
                    entry.imageUrl = imageURL;  // Update image URL if image already exists
                } else {
                    try {
                        convertPDFToImage(pdfPath, imagePath);  // Convert PDF to image
                        entry.imageUrl = imageURL;  // Update image URL after converting
                    } catch (error) {
                        console.error(`Failed to convert ${pdfPath}: ${error.message}`);
                    }
                }
            });

            // Write the updated rows back to the CSV file, including the new image URLs
            const newRows = [headers].concat(csvData.map(entry => [
                entry.id, entry.title, entry.categories, entry.description, entry.creationDate,
                entry.uploadDate, entry.reportYear, entry.reportQuarter, entry.imageUrl, entry.pdfUrl
            ]));

            writeCSV(csvFilePath, newRows);

      - name: Commit images and updated CSV
        env:
          ACTIONS_PAT: ${{ secrets.ACTIONS_PAT }}  # Use ACTIONS_PAT for committing changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions Bot"
          
          # Check if any images were generated before trying to commit
          if [ "$(ls -A metadata/*.png 2>/dev/null)" ] || [ -n "$(git status --porcelain csv_data.csv)" ]; then
            git add metadata/*.png csv_data.csv
            git commit -m "Generated images from PDFs and updated CSV with image URLs"
            git push "https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }}.git"
          else
            echo "No new images or changes to commit."
          fi
