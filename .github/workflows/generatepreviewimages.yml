name: Generate Images from PDFs

on:
  workflow_run:
    workflows: ["Update csv_data.csv with new PDFs"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Recreate all images'
        required: false
        default: 'false'

jobs:
  generateImages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y poppler-utils

      - name: Generate PNG images and update CSV
        id: generate_images
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const baseUrl = 'https://raw.githubusercontent.com/${{ github.repository }}/main/';
            const csvFilePath = 'csv_data.csv';
            const metadataFolder = 'metadata';
            const recreateImages = "${{ github.event.inputs.recreate }}" === "true";

            // Ensure the metadata folder exists
            if (!fs.existsSync(metadataFolder)) {
                fs.mkdirSync(metadataFolder);
            }

            const readCSV = (filePath) => {
                const data = fs.readFileSync(filePath, 'utf-8');
                return data.split('\n').map(row => row.split(',')).filter(row => row.length > 1);
            };

            const writeCSV = (filePath, rows) => {
                const csvContent = rows.map(e => e.join(",")).join("\n");
                fs.writeFileSync(filePath, csvContent, 'utf-8');
            };

            const convertPDFToImage = (pdfPath, imagePath) => {
                if (!fs.existsSync(pdfPath)) {
                    console.error(`PDF file not found: ${pdfPath}`);
                    return;
                }
                console.log(`Converting PDF: ${pdfPath} to Image: ${imagePath}`);

                // Using pdftoppm to convert PDF to PNG
                const outputPrefix = path.parse(imagePath).name; // Get the base name without extension
                try {
                    execSync(`pdftoppm "${pdfPath}" "${outputPrefix}" -png -f 1 -l 1`);
                } catch (error) {
                    console.error(`Failed to convert ${pdfPath}: ${error.message}`);
                }
            };

            const rows = readCSV(csvFilePath);
            const headers = rows[0];  // Store the header row for later use
            const csvData = rows.slice(1).map(row => {
                return {
                    id: row[0],
                    title: row[1],
                    categories: row[2],
                    description: row[3],
                    creationDate: row[4],
                    uploadDate: row[5],
                    reportYear: row[6],
                    reportQuarter: row[7],
                    imageUrl: row[8],
                    pdfUrl: row[9]
                };
            });

            // Process each row to generate images
            let newRows = [headers];
            csvData.forEach(entry => {
                const { id, pdfUrl } = entry;

                // Construct paths
                const pdfPath = pdfUrl.replace(baseUrl, '');
                const imagePath = path.resolve(metadataFolder, `${id}.png`);
                const imageURL = `${baseUrl}${metadataFolder}/${id}.png`;

                // Check if the image already exists
                if (!recreateImages && fs.existsSync(imagePath)) {
                    entry.imageUrl = imageURL;
                } else {
                    convertPDFToImage(pdfPath, imagePath);
                    entry.imageUrl = imageURL;
                }
                newRows.push(entry);
            });

            writeCSV(csvFilePath, newRows);

      - name: Commit changes
        if: steps.generate_images.outputs.changes == 'true'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add metadata/*.png csv_data.csv
          git commit -m "Generated images from PDFs and updated CSV with image URLs"
          git push origin "${{ github.ref }}"
