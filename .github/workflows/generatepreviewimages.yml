name: Generate Images from PDFs

on:
  workflow_run:
    workflows: ["Update csv_data.csv with new PDFs"]  # Name of the first workflow
    types:
      - completed
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Recreate all images'
        required: false
        default: 'false'

jobs:
  generateImages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Use the latest version for compatibility

      - name: Setup Node.js
        uses: actions/setup-node@v4  # Ensure Node.js is available
        with:
          node-version: '20'  # Ensure it uses Node.js 20

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y poppler-utils  # For pdf2image dependencies
          python -m pip install --upgrade pip
          pip install pdf2image

      - name: Generate PNG images and update CSV
        uses: actions/github-script@v7  # Use the latest version
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const baseUrl = 'https://raw.githubusercontent.com/${{ github.repository }}/main/';
            const csvFilePath = 'csv_data.csv';
            const metadataFolder = 'metadata';
            const recreateImages = "${{ github.event.inputs.recreate }}" === "true";

            if (!fs.existsSync(metadataFolder)){
                fs.mkdirSync(metadataFolder);
            }

            const readCSV = (filePath) => {
                const data = fs.readFileSync(filePath, 'utf-8');
                return data.split('\n').map(row => row.split(',')).filter(row => row.length > 1);
            };

            const writeCSV = (filePath, rows) => {
                const csvContent = rows.map(e => e.join(",")).join("\n");
                fs.writeFileSync(filePath, csvContent, 'utf-8');
            };

            const convertPDFToImage = (pdfPath, imagePath) => {
                execSync(`convert -density 150 ${pdfPath}[0] -quality 90 ${imagePath}`);
            };

            const generateID = (filePath) => {
                const crypto = require('crypto');
                return crypto.createHash('md5').update(filePath).digest('hex');
            };

            let rows = readCSV(csvFilePath);
            const headers = rows[0];
            let csvData = rows.slice(1).reduce((acc, row) => {
                let id, title, categories, description, creationDate, uploadDate, reportYear, reportQuarter, imageUrl, pdfUrl;
                [id, title, categories, description, creationDate, uploadDate, reportYear, reportQuarter, imageUrl, pdfUrl] = row;
                acc[id] = { id, title, categories, description, creationDate, uploadDate, reportYear, reportQuarter, imageUrl, pdfUrl };
                return acc;
            }, {});

            const allPdfFiles = fs.readdirSync('.').filter(file => file.endsWith('.pdf'));
            
            allPdfFiles.forEach(pdfFile => {
                const pdfPath = path.resolve(pdfFile);
                const id = generateID(pdfFile);
                const imageName = `${id}.png`;
                const imagePath = path.resolve(metadataFolder, imageName);
                const imageUrl = `${baseUrl}${metadataFolder}/${imageName}`;

                const meta = {
                    title: path.basename(pdfFile),
                    categories: csvData[id]?.categories || 'Uncategorized',
                    description: `Report file located at ${pdfFile}`,
                    creationDate: new Date().toISOString().split('T')[0],
                    uploadDate: new Date().toISOString().split('T')[0],
                    reportYear: new Date().getFullYear(),
                    reportQuarter: Math.floor((new Date().getMonth() + 3) / 3),
                    pdfUrl: `${baseUrl}${pdfFile}`,
                    imageUrl
                };

                if (!recreateImages && fs.existsSync(imagePath)) {
                    csvData[id] = { ...csvData[id], ...meta };
                } else {
                    convertPDFToImage(pdfPath, imagePath);
                    csvData[id] = { id, ...meta };
                }
            });

            const newRows = [headers].concat(Object.values(csvData).map(entry => [
                entry.id, entry.title, entry.categories, entry.description, entry.creationDate, entry.uploadDate, 
                entry.reportYear, entry.reportQuarter, entry.imageUrl, entry.pdfUrl
            ]));
            
            writeCSV(csvFilePath, newRows);

      - name: Commit images and updated CSV
        env:
          ACTIONS_PAT: ${{ secrets.ACTIONS_PAT }}  # Use ACTIONS_PAT for committing changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions Bot"
          git add metadata/*.png csv_data.csv
          git commit -m "Generated images from PDFs and updated CSV with image URLs"
          git push "https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/${{ github.repository }}.git"
